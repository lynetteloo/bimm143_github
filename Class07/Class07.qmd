---
title: "Class 7: Machine Learning 1"
author: "Lynette"
format: pdf
---

Today we will start our multi-part exploration of some key machine learning methods. We will begin with clustering - finding groupingd in data, and then dimensionality reduction.


## Clustering

Let's start with "k-means" clustering. 
The main function in base R for this `kmeans`. 

```{r}
# make up some data
hist(rnorm(100000, mean=3))
```

```{r}
tmp <- c(rnorm(30, -3),rnorm(30, +3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

Now let's try out `kmeans()`

```{r}
km <- kmeans(x, centers=2)
km
```

```{r}
attributes(km)
```

> Q. How many points in each cluster?

```{r}
km$size
```

> Q. What component of your result object details cluster assignment/membership?

```{r}
km$cluster
```

> Q. What are centers/mean values of each cluster?

```{r}
km$centers
```

> Q. Make a plot of your data showing clustering results (groupings/clusters and cluster centers).

```{r}
plot(x, col=c("red", "blue"))
```

```{r}
plot(x, col=km$cluster)
points(km$centers, col="green", pch=15, cex=3)
```

> Q. Run `kmeans()` again and cluster in 4 groups and plot the results.

```{r}
km4 <- kmeans(x, centers=4)
km4
```

```{r}
plot(x, col=km4$cluster)
points(km4$centers, col="green", pch=16, cex=2)
```

## Hierarchial Clustering

This form of clustering aims to reveal the structure in your data by progressively grouping points into an ever smaller number of clusters.

The main function in base R for this is called `hclust()`. This function does not take our input data directly, but wants a "distance matrix" that details how (dis)similar all our input points are to each other.

```{r}
hc <- hclust(dist(x))
```

The print out above is not very useful (unlike that from `kmeans()`) but there is a useful `plot)` method.

```{r}
plot(hc)
abline(h=10, col="red")
```

To get my main result (my cluster membership vector), I need to "cut" my tree using the function `cutree()` 

```{r}
grps <- cutree(hc, h=10)
grps
```

```{r}
plot(x, col=grps)
```


# Principal Component Analysis (PCA)

The goal of PCA is to reduce the dimensionality of a dataset down to some smaller subset of new variables (called PCs) that are a useful basis for further analysis, like visualization, clustering, etc.



```{r}
# Data import
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
ncol(x)
nrow(x)
dim(x)
```

Check Data

```{r}
head(x)
```


> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer the first approach because it is less code and more straitforward was is happening. 


```{r}
barplot(as.matrix(x), beside=TRUE, col=rainbow(nrow(x)))
```

> Q3: Changing what optional argument in the above barplot() function results in the following plot?

Taking away the "beside=TRUE"


```{r}
barplot(as.matrix(x), col=rainbow(nrow(x)))

```

>Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

It means that the x and y axis points are very similar (the values from the two countries are very similar). 



The so-called "pairs" plot can be useful for small datasets:

```{r}
#rainbow(nrow(x))
pairs(x, col=rainbow(nrow(x)), pch=16)
```

>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

N. Ireland points are not as aligned on the diagonal as other countries of the UK. 



So the pairs plot is useful for small datasets but it can be lots of work to interpret and gets untractable for larger datasets. 

So PCA to the rescue...

The main function to do in PCA in base R is called `prcomp()`.

```{r}
pca <- prcomp(t(x))
summary(pca)
```

```{r}
attributes(pca)
```

```{r}
pca$x
```

A major PCA result visualization is called "PCA plot" (a.k.a.: a score plot, biplot, PC1 vs PC2 plot, ordination plot)

```{r}
mycols <- c("orange", "red", "blue", "darkgreen")
plot(pca$x[,1], pca$x[,2], col=mycols, pch=16, xlab="PC1", ylab="PC2")
abline(h=0, col="gray")
abline(v=0, col="gray")
```

Another important output from PCA is called the "loadings" vector or the "rotation" component - this tells us how much the original variables (the foods inthis case) contribute to the new PCAs.

```{r}
pca$rotation
```

PCA looks to be a super useful method for gaining some insight into high dimensional data that is difficult to examine in other ways. 

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```


```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
```

```{r}
summary(pca)
```

> Q. How many genes in this dataset

```{r}
nrow(rna.data)
```

```{r}
attributes(pca)
```

```{r}
pca$x
```

```{r}
head(pca$x)
```

I will make a main redult figure using ggplot 
```{r}
library(ggplot2)
```

```{r}
res <- as.data.frame(pca$x)
```

```{r}
ggplot(res) +
  aes(PC1,PC2) +
  geom_point()
```

```{r}
mycols <- rep("blue",5)
ggplot(res) +
  aes(x= PC1, y=PC2) +
  geom_point(cols=mycols)
```

```{r}
colnames(rna.data)
```













